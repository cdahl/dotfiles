;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(select person (where {:klickster true}))" "(select person (where (str \"downloaddate < '\" date \"'\") ))

" "(def date \"2014-01-01\")" "(select person (where \"downloaddate < '2014-01-01'\" ))" "(select person (where (< :downloaddate \"'2014-01-01'\")))" "(select person (where (< :downloaddate \"2014-01-01\")))" "(select person (where (< :downloaddate \"'2014-01-01'\")))" "(select person (where (> :downloaddate \"'2015'\")))" "(select person (where (> :downloaddate \"now()\")))" "(select person (where (> :downloaddate \"now9)\")))" "(select person (where (> :downloaddate \"2015\")))" "(compare (java.sql.Date. 14 11 9) (java.sql.Date. 13 11 9))" "(compare (java.sql.Date. 14 11 9) (java.sql.Date. 15 11 9))" "(> (java.sql.Date. 14 11 9) (java.sql.Date. 15 11 9))" "(> (java.sql.Date 14 11 9) (java.sql.Date. 15 11 9))" "(select person (where (> :downloaddate (java.sql.Date. 15 11 9))))" "(select person (where (> :downloaddate (java.sql.Date. 14 11 9))))" "(select person (where (> :downloaddate (java.sql.Date. 14 9 11))))" "(select person (where (> :downloaddate (java.sql.Date. 14 11 09 ))))" "(select person (where (> :downloaddate (java.sql.Date. 14 09 11))))" "(select person (where (> :downloaddate (java.sql.Date. 2014 09 11))))" "(select person (where (> :downloaddate (java.sql.Date. 55 10 10))))" "(select person (where (> :downloaddate (java.util.Date. 55 10 10))))" ")))" "(select person (where (> :downloaddate \"date(2014-09-10)\")))" "(select person (where (> :downloaddate \"2014-09-10\")))" "(select person)" "(config :db)" "(all-profiles-in-path profdir)" "profdir" "(doc partial)" "(all-profiles-in-path profdir)" "(join-path \"/tmp\" \"asdf.df\")" "(parse-person bug)" "(parse-person bugf)" "(to-duration-text bug)" "(from-duration-text bug)" "(let [t (from-duration-text bug)] (unless (= \"\" t) t \"asdf\"))" "(or (from-duration-text bug) \"asdf\")" "(from-duration-text bug)" "(from-duration bug)" "(parse-experience bug)" "(experience bug)" "(experience-node bug)" "(name-node bug)" "bug" "bu" "(def bug (fetch-page \"/Users/phyrex/work/klick-koi-tools/LinkedIn_Crawler/testdata/maximiliansToronto/331961039.2014-09-11.html\"))" "(def bugf \"/Users/phyrex/work/klick-koi-tools/LinkedIn_Crawler/testdata/maximiliansToronto/331961039.2014-09-11.html\")" "(parse-profile \"/Users/phyrex/work/klick-koi-tools/LinkedIn_Crawler/testdata/maximiliansToronto/331961039.2014-09-11.html\")" "(parse-profile \"/Users/phyrex/work/klick-koi-tools/LinkedIn_Crawler/testdata/maximiliansToronto/331961039.2014-09-11.htm\")" "(parse-profile \"/Users/phyrex/work/klick-koi-tools/LinkedIn_Crawler/testdata/maximiliansToronto/331842327.2014-09-11.html\")" "(write-all-profiles-in-path profdir)" "(all-profiles-in-path profdir)" "(all-profiles-in profdir)" "profdir" "(all-profiles-in profdir)" "(write-all-profiles-in-path profdir)" "(write-all-profiles-in-path profpath)" "(all-profiles-in profdir)" "(all-profiles-in refdir)" "(write-profile-to-db maxig)" "(write-profile-to-db maxi)" "(write-profile-to-db maxig)" "(write-profile-to-db maxi)" "{:personid 72234021, :company St. Maximilian Kolbe Catholic High School, :title Principal, :fromdate #<DateTime 2008-01-01T00:00:00.000-05:00>, :todate #<DateTime 2014-09-18T11:58:10.503-04:00>}" "(write-profile-to-db maxi)" "(write-profile-to-db maxig)" "(save-person mm)" "(def mm *1)" "(parse-file koi-parser.core/maxig)" "(parse-file)" "(write-profile-to-db maxig)" "(assoc mm :downloaddate (c/to-sql-date (:download-date mm)))" "(assoc mm :download-date (c/to-sql-date (:downloaddate mm)))" "(assoc mm :download-date (c/to-sql-date (:downloaddate %)))" "(require '[clj-time.coerce :as c])" "(assoc mm :download-date (c/to-sql-date (:downloaddate %)))" "(def mm *1)" "(parse-profile maxig)" "(write-profile-to-db maxig)" "(to-sql-date t)" "(def t *1)" "(f/parse custom-formatter \"10100311\")" "  (def custom-formatter (f/formatter \"yyyyMMdd\"))" "(parse custom-formatter \"20100311\")" "  (def custom-formatter (formatter \"yyyyMMdd\"))" "(to-sql-date n)" "(use 'clj-time.coerce)" "n" "(def n l/local-now)" "(write-profile-to-db maxig)" "(select person)" "(save-experiences mg \"123456789\")" "mg" "(write-profile-to-db maxig)" "(parse-profile maxig)" "(dry-run (select person))" "(select person)" "(parse-profile maxig)" "(koi-parser.database/save-person mg)" "(System/getenv \"DATABASE_URL\")" " (create-map-from-uri (System/getenv \"DATABASE_URL\"))" "
(defn create-map-from-uri
  [uri]
  (let [parsed (parse-db-uri uri)]
  (zipmap [:user :password :host :port :db] parsed)))" "(defn parse-db-uri
  [uri]
  (drop 1 (s/split uri #\"://|:|@|/\")))
" "(defn parse-db-uri
  [uri]
  (drop 1 (split uri #\"://|:|@|/\")))
" "(defn create-map-from-uri
  [uri]
  (let [parsed (parse-db-uri uri)]
  (zipmap [:user :password :host :port :db] parsed)))
" "   (postgres (db-info)))" "(koi-parser.database/save-person mg)" "(def mg *1)" "(parse-file *1)" "koi-parser.core/maxig" "(koi-parser.core/maxig)" "maxig" "(koi-parser.core/mp)" "mp" "(koi-parser.database/save-person mp)" "mp" "(save-profile mp)" "mp" "(def mp *1)" "(parse-profile maxig)" "(parse-profile maxi)" "(write-profile-to-db maxi)" "maxi" "m" "(pprint (parse-person maxi2))" "(pprint (parse-person maxi))" "(pprint (parse-person maxig))" "(klickster? maxi)" "(map is-currently-klickster? (experience-node maxig))" "(Klick? t)" "(map is-currently-klickster? (experience-node maxig))" "(klickster? maxi)" "(pprint (parse-person maxig))" "(pprint (parse-person maxi2))" "(pprint (parse-person maxi))" "(parse-person maxi)" "(parse-experience t)" "(klickster? maxi)" "(klickster? maxig)" "(klickster? maxi2)" "(klickster? maxig)" "(klickster? maxi)" "(map boolean (map is-klickster? (experience-node maxi2)))" "(map is-klickster? (experience-node maxi2))" "(map company (experience-node maxi2))" "(map is-klickster? (experience-node maxig))" "(map company (experience-node maxig))" "(map identity (experience-node maxig))" "(map is-klickster? (experience-node maxig))" "(map is-klickster? (experience-node maxi2))" "(map is-klickster? (experience-node maxi))" "(is-klickster? t)" "(Klick? t)" "(map #(re-find % (company t)) klick-companies) " "(map #(re-find %(company t) klick-companies) t) " "(map #(re-find % (company t) klick-companies) t) " "(map #(re-find % (company t) klick-companies))" "(Klick? t)" "(strip-dash *1)" "(to-duration-text t)" "*3" "*2" "*1" "(strip-dash *)" "(to-duration-text t)" "(is-klickster? t)" "(map is-klickster? (experience-node maxi))" "t" "(t)" "t" "
" "(query db \"select * from tables\")" "(db)" "(defdb db (sqlite3 {:db \"filename.db\"}))" "(max)" "(select)" "(use 'korma.db)" "(apply str (flatten (map #(get %1 :content %1) (first (map :content  (select max  [:li.position :h5 :a])))))) " "(apply str (map #(get %1 :content %1) (first (map :content  (select max  [:li.position :h5 :a]))))) " "(map #(get %1 :content %1) (first (map :content  (select max  [:li.position :h5 :a])))) " "(get :content {:content \"hi\"})" "(get content {:content \"hi\"})" "(map #(get :content %1 %1) (first (map :content  (select max  [:li.position :h5 :a])))) " "(first (map :content  (select max  [:li.position :h5 :a])))" "(apply str (first (map :content  (select max  [:li.position :h5 :a]))))" "(first (map :content  (select max  [:li.position :h5 :a])))" "(map :content  (select max  [:li.position :h5 :a]))" "(map :content  (select max  [:li.position :h4 :a]))" "  (select max  [:li.position :h4 :a])" "(:content  (select max  [:li.position :h4 :a]))" "(:content (first (select max  [:li.position :h4 :a])))" "(:content (first (select max  [:li.position :h4] :a)))" "(:content (first (select max  [:li.position :h4])))" "(first (select max  [:li.position :h4]))" "(first (select max  [:li.position :h4 :content]))" "(select max  [:li.position :h4 :content])" "(select max  [:li.position :h4])" "(first (select max  [:li.position :h4 :content]))" "(content (first (select max  [:li.position :h4])))" "(first (select max  [:li.position :h4]))" "(select max  [:li.position :h4])" "(select max  [:li.position])" "(first max)" "(fetch-page \"/tmp/maximiliansToronto/96514174.2014-09-11.html\")" "(-main)" "(drop-tables)" "(-main)" "(doc println)" "(use 'clojure.repl)" "(doc println)" "(keywordize '(\"--oh\" \"hai\"))" "(partition 2 1 2 3 4 )" "(partition 2 '(1 2 3 4 5 6))" "(parse-args '(\"key\" \"value\"))")