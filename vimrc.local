"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==== Usage notes
"
" closetag: <C-_>
" edit vimrc.local: <leader>ev
" Pressing ,ss will toggle and untoggle spell checking
"
" Go up/down by white line: {}
" In MacVim, you can have multiple tabs open. This mapping makes Ctrl-Tab
" switch between them, like browser tabs. Ctrl-Shift-Tab goes the other way.
"
" toggle invis chars: <leader>i
"
" split window: vv
" swap splits: <leader>r
"
" observableUser.set("name", user.name); => observableUser.name = user.name;
" s/set("\(.\+\)",\(.\+\));/\1 =\2;/
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ============ Appearance ========================= {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set cursorline "highlight current line

"colorscheme jellybeans
source ~/dotfiles/custom/jellybeans.vim


set hlsearch "highlight search results
set smartcase "smart case for search
" Disable highlight when <leader>. is pressed
map <silent> <leader>. :noh<cr>

" set relativenumber "this is actually really cool! The opposite is :set number!
set formatoptions=qrn1

" ================= GUI setup ========================= {{{
if has('gui_running')
	" disable the GUI stuff
	set go=
	set guifont=Source_Code_Pro:h13
	" In MacVim, you can have multiple tabs open. This mapping makes Ctrl-Tab
	" switch between them, like browser tabs. Ctrl-Shift-Tab goes the other way.
	noremap <C-Tab> :tabnext<CR>
	noremap <C-S-Tab> :tabprev<CR>

	" Switch to specific tab numbers with Command-number
	noremap <D-1> :tabn 1<CR>
	noremap <D-2> :tabn 2<CR>
	noremap <D-3> :tabn 3<CR>
	noremap <D-4> :tabn 4<CR>
	noremap <D-5> :tabn 5<CR>
	noremap <D-6> :tabn 6<CR>
	noremap <D-7> :tabn 7<CR>
	noremap <D-8> :tabn 8<CR>
	noremap <D-9> :tabn 9<CR>
	" Command-0 goes to the last tab
	noremap <D-0> :tablast<CR>
endif
" }}}

" ============ Show overlong line indicator ========================= {{{
 highlight OverLength ctermbg=238 guibg=#ff7f00

 let g:overlength_enabled = 0
 function! ToggleOverLength()
	 if g:overlength_enabled == 0
		 match OverLength /\%79v/
		 let g:overlength_enabled = 1
		 " echo 'OverLength highlighting turned on'
	 else
		 match
		 let g:overlength_enabled = 0
		 " echo 'OverLength highlighting turned off'
	 endif
 endfunction

 " call ToggleOverLength()

 nnoremap <leader>h :call ToggleOverLength()<CR>
" }}}

" ================ Statusline ========================= {{{
" from https://github.com/spf13/spf13-vim/blob/master/.vimrc
" reference: http://learnvimscriptthehardway.stevelosh.com/chapters/17.html
" " %< truncation point
" \ space
" %f relative path to file
" %m modified flag [+] (modified), [-] (unmodifiable) or nothing
" %r readonly flag [RO]
" %y filetype [ruby]
" %= split point for left and right justification
" %-14.( %) block of fixed width 14 characters
" %l current line
" %c current column
" %V current virtual column as -{num} if different from %c
" %P percentage through buffer
" set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

if has('statusline')
  set laststatus=2
  " Broken down into easily includeable segments
  " %.20f = restrict filename to 20 chars
  set statusline=%<%.25f\ " Filename
  set statusline+=%w%h%m%r " Options
  set statusline+=%{fugitive#statusline()} " Git Hotness
  set statusline+=\ [%{&ff}/%Y] " filetype
  " set statusline+=\ [%{getcwd()}] " current dir
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
  let g:syntastic_enable_signs=1
  set statusline+=%=%-14.(%l,%c%V%)\ %p%% " Right aligned file nav info
endif

"stolen from spf13
" if has('statusline')
" 	set laststatus=2

" 	" Broken down into easily includeable segments
" 	set statusline=%<%f\					 " Filename
" 	set statusline+=%w%h%m%r				 " Options
" 	set statusline+=%{fugitive#statusline()} " Git Hotness
" 	set statusline+=\ [%{&ff}/%Y]			 " Filetype
" 	set statusline+=\ [%{getcwd()}]			 " Current dir
" 	set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
" endif

" let g:airline_theme="jellybeans"
" }}}

" =============== Showmarks ========================= {{{
let g:showmarks_enable = 1 "always show showmarks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
" Ignore help, quickfix, non-modifiable buffers
let showmarks_ignore_type = "hqm"
" }}}

" ========= Invisibles ========================= {{{
" set listchars=trail:.,tab:>-,eol:$
" set listchars=tab:│┈,trail:·,extends:>,precedes:<,nbsp:&
" set listchars=trail:.,tab:>-,eol:¬
set listchars=tab:│\ ,trail:·,extends:>,precedes:<,nbsp:&
"make the listchars it a bit less noticeable
"standard: guifg=#444444 guibg=#1c1c1c 
highlight SpecialKey guifg=#2c2c2c guibg=#1a1a1a
highlight CursorLine guibg=#303030

" Toggle invisible chars
noremap <Leader>i :set list!<CR>
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" ==== Functionality/Behaviour {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" =============== Splits ========================= {{{
" Open new split panes to right and bottom, which feels more natural than Vim's default:
set splitbelow
set splitright

nnoremap vv :vsplit<cr><C-w>l
nnoremap <leader>r <C-w>r

" Create a split on the given side.
" From http://technotales.wordpress.com/2010/04/29/vim-splits-a-guide-to-doing-exactly-what-you-want/
nmap <leader><left> :leftabove vsp<CR>
nmap <leader><right> :rightbelow vsp<CR>
nmap <leader><up> :leftabove sp<CR>
nmap <leader><down> :rightbelow sp<CR>
" }}}


" ============== Indentation ========================= {{{
set softtabstop=4 tabstop=4 shiftwidth=4 noexpandtab " should give me tabs instead of spaces. Reformat with =
set clipboard=autoselect
set smartindent "Smart indent
set wrap "Wrap lines
" set nowrap "Don't wrap lines
set linebreak "Wrap lines at convenient points
" }}}


" ================ Persistent Undo ================== {{{
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
	silent !mkdir ~/.vim/backups > /dev/null 2>&1
	set undodir=~/.vim/backups
	set undofile

	set undolevels=500 "maximum number of changes that can be undone
endif
" }}}


" ============ History ========================= {{{
set history=1000
" }}}


" ============ Completion ========================= {{{
set wildmenu "show completion menu
" set wildmode=list:longest "complete up to the point where it's ambiguous
set wildmode=longest:full,list:full "autocomplete that seems to work better, eg with cmd mode
" }}}

" ============ Spell Checking ========================= {{{
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=
" }}}


" =========== Folds ========================= {{{
set foldmethod=syntax
"unfold everything on opening file
au BufRead * normal zR
set foldnestmax=3 "deepest fold is 3 levels
set nofoldenable "dont fold by default

" better foldtext from http://dhruvasagar.com/2013/03/28/vim-better-foldtext?utm_source=rss&utm_medium=rss&utm_campaign=vim-better-foldtext
function! NeatFoldText() 
	let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
	let lines_count = v:foldend - v:foldstart + 1
	let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
	let foldchar = matchstr(&fillchars, 'fold:\zs.')
	let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
	let foldtextend = lines_count_text . repeat(foldchar, 8)
	let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
	return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction

set foldtext=NeatFoldText()
" }}}

" ============ Spelling ========================= {{{
set dictionary+=/usr/share/dict/words
" set complete+=k " enable dictionary completion. This sucks because it always
" autocompletes, even in sourcecode. Dictionary completion is always available
" through <C-x><C-k>.

"highlight clear SpellBad "No funky spelling correction wriggles

" cmd+left=fold, cmd+right=unfold
nnoremap <D-left> zc
nnoremap <D-right> zo
nnoremap <Space> za
" }}}


" ============ Scrolling ========================= {{{
"up by 3 lines
nnoremap <C-e> 3<C-e>
"down by 3 lines
nnoremap <C-y> 3<C-y>
set scrolloff=8 "start scrolling 8 lines from the bottom
" }}}

" ========= Misc ========================= {{{

"autosave when losing focusresults
autocmd BufLeave,FocusLost * silent! wall

" No annoying sound on errors
set noerrorbells
set novisualbell
set vb t_vb=
set tm=500

" Edit vimrc with ,ev - i need it often enough to warrant this
nnoremap <leader>ev :vsplit ~/dotfiles/vimrc.local<cr>
nnoremap <leader>ez :vsplit ~/dotfiles/zshrc<cr>
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" ==== Keymap Shortcuts{{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" remap ESC
inoremap jj <ESC>
inoremap jk <ESC>

" get out easier
nnoremap QQ :q!<cr>

" Quicker command mode
nnoremap ; :
xnoremap ; :

" Quicker delete
" nnoremap <C-x> dd

"map F1 to esc instead of help because that's fucking annoying
map <F1> <Esc>
imap <F1> <Esc>

" map <F13><F14><F15>
nmap <F13> ciw
nmap <F14> ci"
nmap <F15> <Plug>CommentaryLine

" Remap VIM 0 to first non-blank character
map 0 ^

" Make cursor move by visual lines instead of file lines (when wrapping)
map <up> gk
map k gk
imap <up> <C-o>gk
map <down> gj
map j gj
imap <down> <C-o>gj
map E ge

" Camelcase Motion
nmap W <Plug>CamelCaseMotion_w
nmap B <Plug>CamelCaseMotion_b
nmap E <Plug>CamelCaseMotion_e

" JS beautify
map <C-=> :call JsBeautify()<cr>

" stuff
inoremap <S-Space> <right>
inoremap <C-Space> <Esc>A;<cr>

inoremap <C-Enter> <Esc>A;<cr>

noremap <D-r> :!rake<Space>
" }}}

" ========= Tabs ========================= {{{
" Tab/shift-tab to indent/outdent in visual mode.
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" and in normal mode
nnoremap <Tab> V>
nnoremap <S-Tab> V<

" Keep selection when indenting/outdenting.
vnoremap > >gv
vnoremap < <gv
" }}}

" ========== Surround ========================= {{{
" ," Surround a word with "quotes"
map ," ysiw"
vmap ," c"<C-R>""<ESC>

" All surrounding operation now simply start with leader-s, freeing up all the
" other keys!
map <leader>s ysiw
vmap <leader>s S



" " ,' Surround) a word with 'single quotes'
" map ,' ysiw'
" vmap ,' c'<C-R>"'<ESC>

" " ,) or ,( Surround a word with (parens)
" " The difference is in whether a space is put in
" map ,( ysiw(
" map ,) ysiw)
" vmap ,( c( <C-R>" )<ESC>
" vmap ,) c(<C-R>")<ESC>

" " ,[ Surround a word with [brackets]
" map ,] ysiw]
" map ,[ ysiw[
" vmap ,[ c[ <C-R>" ]<ESC>
" vmap ,] c[<C-R>"]<ESC>

" " ,{ Surround a word with {braces}
" map ,} ysiw}
" map ,{ ysiw{
" vmap ,} c{ <C-R>" }<ESC>
" vmap ,{ c{<C-R>"}<ESC>


" Now provided by unimpaired with [p, ]p
" paste in line above
" nmap <leader>P O<Esc>p
" " and below
" nmap <leader>p o<Esc>p
" }}}

" ========================= Textmate-like keymaps ========================= {{{

" awesome, inserts new line without going into insert mode
nnoremap <S-Enter> O<ESC>0D
nnoremap <Enter> o<ESC>0D

" ctrl+enter = new line underneath in insert mode - (nearly) like textmate
imap <S-Enter> <ESC>o

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
if has("mac") || has("macunix")
	nmap <D-j> <M-j>
	nmap <D-k> <M-k>
	vmap <D-j> <M-j>
	vmap <D-k> <M-k>
endif

" " command+/ comments/uncomments line. Just like in Textmate. Nice
" In visual mode it comments the whole block
nmap <D-/> <Plug>CommentaryLine
xmap <D-/> <Plug>Commentary
" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" => Misc {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Save a file as root.
cabbrev w!! w !sudo tee % > /dev/null<CR>:e!<CR><CR>

" Ruby stuff
" Insert HashRockets... :)
imap <C-l> <Space>=><Space>

" Alignment
map <Leader>l :Align<space>

set fileformat=unix
set fileformats=unix,dos

filetype indent on


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" =>  Filetype mappings {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" au BufRead *.html set ft=javascript.html
"
" au BufNewFile *.html set ft=javascript.html
" au BufRead *.htm set ft=javascript.html
" au BufNewFile *.htm set ft=javascript.html
" au BufRead *.js set ft=javascript.html
" au BufNewFile *.js set ft=javascript.html
"au BufRead,BufNewFile *.{html,htm,js} set ft=html.javascript
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

au BufRead *.htm{,l} :inoremap <control><shift><enter> <br><cr>

" always open help in vertical split
augroup helpfiles
  au!
  au BufRead,BufEnter */doc/* wincmd L
augroup END
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ShowMarks {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:showmarks_enable = 1 "always show showmarks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
" Ignore help, quickfix, non-modifiable buffers
let showmarks_ignore_type = "hqm"
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin Settings {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ============ Necessary for closetag ========================= 
" if !exists("b:unaryTagsStack") || exists("b:closetag_html_style")
"	  if &filetype == "html" || exists("b:closetag_html_style")
"		  let b:unaryTagsStacktack="area base br dd dt hr img input link meta param"
"	  else " for xml and xsl
"		  let b:unaryTagsStack=""
"	  endif
" endif

" if !exists("b:unaryTagsStack")
"	  let b:unaryTagsStack=""
" endif

" ============ Gundo ========================= {{{
let g:gundo_preview_bottom=1
nnoremap <leader>u :GundoToggle<CR>
" }}}


" ============ snippets ========================= {{{
let g:snippets_dir="$HOME/dotfiles/vim-snippets/"
" }}}

" ============ syntastic ========================= {{{
let g:syntastic_check_on_open=1
let g:syntastic_javascript_checkers = ['jshint']
" }}}

" ============ Easytags =========================
" if there already is a tags file, use that one
let g:easytags_dynamic_files = 1

command! Marked silent !open -a "Marked.app" "%:p"

" call ToggleOverLength() "show the overlength indicator. No idea why I have to put it here..
